	由于计算机所拥有的物理资源有限，当多个程序在计算机上同事运行时，它们不可能连续地在处理器上运行或占用全部内存，因此我们需要进程的抽象在用户的一侧隐藏上下文切换等细节。
	进程作为运行的程序的抽象，包含了一个程序的运行状态和这个程序所用的抽象内存及其中存储的数据。一个进程可以使用的全部内存的地址和它们存储的数据，称为这个进程的地址空间。
	进程是一个或多个线程与一个地址空间的结合。


	进程的结构必须能够囊括一个进程的运行状态，在由于终端、异常或系统调度进入内核态时，我们应该能够将进程的运行状态放入内存中的某一位置，使我们可以在某一个时间点根据进程的优先级接着这次的进度再次运行该进程；另一方面，由于进程子用户一侧对内存进行了抽象，我们需要在系统一侧包含从抽象内存向实际内存和外村（磁盘等存储设备）的映射，以便通过抽象内存的地址忽的物理地址和其中存储的数据
	
	进程中存储其运行状态，在进程中存储处理器状态寄存器】指令计数器、栈指针、通用寄存器等代表了进程目前的运行状态的值。

	并行：在物理时间上同事运行，区别于多个进程在处理器的并发，同一个进程可能包含有多个不同的运行状态。



线程：每个线程拥有一个线程控制块，处理器状态寄存器、指令计数器、栈指针、通用寄存器等数值，但同一进程中的所有线程都共享同一个地址空间。




父进程与子进程：
	先由当前运行的进程调用fork（）产生新的进程，然后在进程中用exec()类函数运行新程序。linux采用了copy_on_write计数，也就是说只有在某一个数据被修改时那个数据才会被实际复制带子进程的地址空间，所以当fork之后直接运行exec()时，父进程的地址空间不会被复制过来。
进程常用函数：for(),wait(),exit(),exec()
